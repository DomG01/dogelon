{"version":3,"sources":["logo.png","components/Ticker/Ticker.js","App.jsx","reportWebVitals.js","index.js"],"names":["Ticker","props","state","data","this","getRequest","a","req","unirest","headers","end","res","error","Error","setState","body","market_data","current_price","gbp","usd","eur","Component","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ggBAAe,G,OAAA,IAA0B,kC,0GCMpBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACnB,cAAMA,IACDC,MAAQ,CAAEC,KAAM,IAFF,E,qDAKpB,WAICC,KAAKC,e,+DAON,mCAAAC,EAAA,uDACKC,EAAMC,IAAQ,MAAO,oDAErBC,QAAQ,CACX,OAAU,mBACV,gBAAkB,IAEnBF,EAAIG,IAAJ,uCAAQ,WAAOC,GAAP,SAAAL,EAAA,0DACHK,EAAIC,MADD,sBACc,IAAIC,MAAMF,EAAIC,OAD5B,OAEP,EAAKE,UAAS,iBAAO,CACpBX,KAAMQ,EAAII,KAAKC,YAAYC,kBAHrB,2CAAR,uDAPD,2C,0EAmBA,WACC,OACC,8BAEE,gCACC,iDAAoBb,KAAKF,MAAMC,KAAKe,OACpC,8CAAoBd,KAAKF,MAAMC,KAAKgB,OACpC,mDAAoBf,KAAKF,MAAMC,KAAKiB,gB,GA3CNC,aCYrBC,MAZf,WACC,OACC,qBAAKC,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,cAAC,EAAD,UCCWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7da314ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.1b0170f0.png\";","import unirest from 'unirest';\r\nimport React, { Component } from 'react';\r\n\r\nimport './Ticker.css';\r\n// import getRequest from '../../modules/getRequest';\r\n\r\nexport default class Ticker extends Component {\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { data: {} };\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\t// need to make the initial call to getData() to populate\r\n\t\t// data right away\r\n\t\t//console.log(getRequest());\r\n\t\tthis.getRequest();\r\n\t\t\r\n\t\t// Now we need to make it run at a specified interval\r\n\t\t // runs every 10 seconds.\r\n\r\n\t}\r\n\r\n\tasync getRequest() {\r\n\t\tlet req = unirest(\"GET\", \"https://api.coingecko.com/api/v3/coins/dogecoin\");\r\n\r\n\t\treq.headers({\r\n\t\t\t\"accept\": \"application/json\",\r\n\t\t\t\"useQueryString\": true,\r\n\t\t});\r\n\t\treq.end(async (res) => {\r\n\t\t\tif (res.error) throw new Error(res.error);\r\n\t\t\tthis.setState(() => ({\r\n\t\t\t\tdata: res.body.market_data.current_price\r\n\t\t\t}));\r\n\t\t})\r\n\r\n\t\t//setInterval(this.setState(() => ({\r\n\t\t\t//data: this.getRequest()\r\n\t\t//})), 10000);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>DOGE &gt; GBP: £{this.state.data.gbp}</p>\r\n\t\t\t\t\t\t<p>DOGE &gt; USD: ${this.state.data.usd}</p>\r\n\t\t\t\t\t\t<p>DOGE &gt; EUR: €{this.state.data.eur}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\n\nimport Ticker from './components/Ticker/Ticker';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<Ticker />\n\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}